- name: Install Container Runtime on All Nodes
  hosts: all_server
  become: true
  tasks:
    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg-agent
        state: latest
        # update_cache: yes
        force_apt_get: yes

    - name: Set modprobe
      command:
        argv:
          - modprobe
          - br_netfilter
          - overlay 

    - name: add sysctl config
      shell: |
        cat <<EOF | sudo tee /etc/sysctl.d/k8s-cri.conf
        net.bridge.bridge-nf-call-iptables=1
        net.ipv4.ip_forward=1
        net.bridge.bridge-nf-call-ip6tables=1
        EOF

    - name: save sysctl config
      command: sysctl --system

    - name: Disable swap
      command: swapoff -a

    - name: Install containerd
      apt:
        pkg:
          - containerd
        state: latest
        # update_cache: yes

    - name: Configure Containerd
      shell: |
        mkdir -p /etc/containerd
        containerd config default | tee /etc/containerd/config.toml
        sed -i s/'SystemdCgroup = false'/'SystemdCgroup = true'/g /etc/containerd/config.toml

    - name: Restart containerd & daemon-reload
      systemd:
        daemon_reload: yes
        name: containerd
        state: restarted
        enabled: yes

- name: Add repo & install kubernetes all Nodes
  hosts: all_server
  become: true
  vars:
    kube_version: "{{ _version }}.2-1.1"
  tasks:
    - name: Add Kubernetes repo gpg key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ _version }}/deb/Release.key | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        
    - name: Add kubernetes repo
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ _version }}/deb/ /"
        state: present

    - name: Install kubectl on master node
      when: inventory_hostname in groups['master']
      apt:
        pkg:
          - kubectl={{ kube_version }}

    - name: Install kubernetes component all nodes
      apt:
        pkg:
          - kubeadm={{ kube_version }}
          - kubelet={{ kube_version }}

- name: Setup cluster on master node
  hosts: master
  gather_facts: false
  become: true
  vars:
    pod_cidr: "{{ _cidr }}"
    cri_sock: /run/containerd/containerd.sock
  tasks:
    - name: Initialize cluster
      command: kubeadm init --pod-network-cidr={{pod_cidr}} --cri-socket {{cri_sock}} --control-plane-endpoint {{hostvars[inventory_hostname].groups.master[0]}}:6443
      register: init_output 

    - debug:
        var: init_output.stdout_lines

    - name: create join command on master node
      command: kubeadm token create --print-join-command
      register: command

    - name: Store join command to variable
      add_host:
        name: "join_command"
        hostname: "{{hostvars[inventory_hostname].groups.master[0]}}"
        commandnya: "{{command.stdout}}"

    - debug:
        msg: "Join command: {{command.stdout}}"

- name: Worker join master
  hosts: worker
  gather_facts: false
  become: true
  vars:
    joinnya: "{{ hostvars['join_command']['commandnya'] }}"
  tasks:
    - name: Kubeam join master
      command: "{{joinnya}}"
      register: result_join

    - debug:
        msg: "{{result_join}}"

- name: Setup network plugin
  hosts: master
  gather_facts: false
  become: true
  tasks:
    - name: Install Flannel network plugin
      command: kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

- name: Guide to access kubernetes cluster
  hosts: master
  gather_facts: false
  become: true
  tasks:
    - name: Guide to access kubernetes cluster
      debug:
        msg: |
          To access the cluster, run the following command as a regular user:
          mkdir -p $HOME/.kube
          sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config
          You can now join any number of machines by running the following on each node
          as root:
          {{hostvars['join_command']['commandnya']}}
